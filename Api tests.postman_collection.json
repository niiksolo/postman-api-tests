{
	"info": {
		"_postman_id": "21326252-b594-42ef-a824-f88610d10063",
		"name": "Api tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46940334"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"–°—Ç–∞—Ç—É—Å –∫–æ–¥ 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type JSON\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ < 1000–º—Å\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"if (pm.response.responseTime > 500) {\r",
									"  console.warn(\"‚ö†Ô∏è Response time –±–æ–ª—å—à–µ 500–º—Å:\", pm.response.responseTime);\r",
									"} else {\r",
									"  pm.test(\"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ < 500–º—Å\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"  });\r",
									"}\r",
									"\r",
									"const json = pm.response.json();\r",
									"\r",
									"pm.test(\"–û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–∫–µ–Ω\", () => {\r",
									"    pm.expect(json).to.have.property(\"token\");\r",
									"    pm.expect(json.token).to.be.a(\"string\").and.to.have.length.above(0);\r",
									"});\r",
									"\r",
									"// üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ\r",
									"pm.environment.set(\"token\", json.token);\r",
									"console.log(\"Saved token:\", pm.environment.get(\"token\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{apiKey }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login missing password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 Bad Request\", () => pm.response.to.have.status(400));\r",
									"const json = pm.response.json();\r",
									"pm.test(\"–ï—Å—Ç—å –ø–æ–ª–µ error\", () => pm.expect(json).to.have.property(\"error\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"email\": \"{{email}}\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login missing email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 Bad Request\", () => pm.response.to.have.status(400));\r",
									"pm.test(\"–ï—Å—Ç—å error\", () => pm.expect(pm.response.json()).to.have.property(\"error\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"password\": \"{{password}}\" }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login invalid creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 Bad Request (invalid creds)\", () => pm.response.to.have.status(400));\r",
									"pm.test(\"–ï—Å—Ç—å error\", () => pm.expect(pm.response.json()).to.have.property(\"error\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"email\": \"wrong@gmail.com\", \"password\": \"wrongpass\" }\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CRUD (Users)",
			"item": [
				{
					"name": "Get users list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"–û—Ç–≤–µ—Ç –≤ JSON\", () => pm.response.to.have.header(\"Content-Type\"));\r",
									"const json = pm.response.json();\r",
									"pm.test(\"–ú–∞—Å—Å–∏–≤ data –Ω–µ –ø—É—Å—Ç–æ–π\", () => pm.expect(json.data.length).to.be.above(0));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey }}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users?page=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 Created\", () => pm.response.to.have.status(201));\r",
									"const json = pm.response.json();\r",
									"pm.test(\"–ï—Å—Ç—å id\", () => pm.expect(json).to.have.property(\"id\"));\r",
									"pm.environment.set(\"userId\", json.id); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –¥–ª—è PATCH/DELETE"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"name\": \"Nik Solo\", \"job\": \"QA Engineer\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
									"const json = pm.response.json();\r",
									"pm.test(\"–ü–æ–ª–µ job –æ–±–Ω–æ–≤–ª–µ–Ω–æ\", () => pm.expect(json.job).to.eql(\"Automation QA Engineer\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey }}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"job\": \"Automation QA Engineer\" }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 No Content\", () => pm.response.to.have.status(204));\r",
									"pm.test(\"–¢–µ–ª–æ –ø—É—Å—Ç–æ–µ\", () => pm.expect(pm.response.text()).to.eql(\"\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey }}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative",
			"item": [
				{
					"name": "empty page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
									"\r",
									"const json = pm.response.json();\r",
									"\r",
									"pm.test(\"data ‚Äî –º–∞—Å—Å–∏–≤\", () => {\r",
									"    pm.expect(json.data).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"data –ø—É—Å—Ç–æ–π (–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)\", () => {\r",
									"    pm.expect(json.data.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey }}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users?page=9999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "9999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "users delayed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK (–∑–∞–¥–µ—Ä–∂–∫–∞)\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"RT > 2500ms\", () => pm.expect(pm.response.responseTime).to.be.above(2500));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey }}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users?delay=3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "delay",
									"value": "3"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "Validate users schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"  type: \"object\",\r",
									"  required: [\"page\",\"data\"],\r",
									"  properties: {\r",
									"    page: { type: \"number\" },\r",
									"    data: {\r",
									"      type: \"array\",\r",
									"      minItems: 1,\r",
									"      items: {\r",
									"        type: \"object\",\r",
									"        required: [\"id\",\"email\"],\r",
									"        properties: {\r",
									"          id: { type: \"number\" },\r",
									"          email: { type: \"string\", pattern: \".+@.+\" }\r",
									"        }\r",
									"      }\r",
									"    }\r",
									"  }\r",
									"};\r",
									"\r",
									"pm.test(\"JSON Schema –≤–∞–ª–∏–¥–µ–Ω\", () => {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?page=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}